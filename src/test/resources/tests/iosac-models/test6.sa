//Type: Basic event; Original name: P_BE1; Assigned unique id: 0
module BE_0
  fc_0 : clock;
  inform_0 : [0..2] init 0;
  brokenFlag_0 : [0..2] init 0;

  [] brokenFlag_0==2 @ fc_0-> (brokenFlag_0'=0) & (fc_0'=erlang(1,2));
  [] brokenFlag_0==0 @ fc_0 -> (inform_0'=1) & (brokenFlag_0'=1);
  

  [f_0!!] inform_0==1 -> (inform_0'=0);
endmodule

//Type: MUX with priority policy; Assigned name: MUX_for_S_BE_1; Assigned unique id: 3
module MUX_3
  queue_3[1]: [0..3] init 0; // State of each spare gates: 0=idle, 1=requesting, 2=reject, 3=using
  avail_3: bool init true; //true if the associated SBE is available
  broken_3: bool init false; // false if the associated SBE is not broken
  enable_3: [0..2] init 0; //used to inform the SBE if is dormant or active

  //Communication from SBE to MUX about the state of the SBE
  [f_1??] -> (broken_3'=true);
  [u_1??] -> (broken_3'=false);

  //Communication from MUX to SBE to inform it to be dormant or active
  [a_1!!] enable_3 == 1 -> (enable_3'=0);
  [d_1!!] enable_3 == 2 -> (enable_3'=0);

  //Communication from multiplexers to spare gates. The relationship is many to many. We use the naming convention <action_name>_<id_from>_<id_to>
  [rq_3_2??] queue_3[0] == 0 & (broken_3 | !avail_3) -> (queue_3[0]' = 2);
  [rq_3_2??] queue_3[0] == 0 & !broken_3 & avail_3 -> (queue_3[0]' = 1);
  [asg_3_2!!] queue_3[0]==1 & !broken_3 & avail_3 -> (queue_3[0]' = 3) & (avail_3' = false);
  [rj_3_2!!] queue_3[0] == 2 -> (queue_3[0]' = 1);
  [rel_3_2??] queue_3[0] == 3 -> (queue_3[0]' = 0) & (avail_3' = true) & (enable_3' = 2);  
  [acc_3_2??] -> (enable_3' = 1);

endmodule

//Type: Basic event; Original name: S_BE_1; Assigned unique id: 1
module BE_1
  fc_1 : clock;
  dfc_1 : clock;
  rc_1 : clock;
  inform_1 : [0..2] init 0;
  active_1 : bool init false;
  brokenFlag_1 : [0..2] init 0;

  [a_1??] !active_1 -> (active_1'=true) & (fc_1'=erlang(2,2));
  [d_1??] active_1 & brokenFlag_1 == 0 -> (active_1'=false) & (dfc_1'=erlang(1,2));
  [d_1??] active_1 & brokenFlag_1 != 0 -> (active_1'=false);
  
  [] active_1 & brokenFlag_1==0 @ fc_1 -> (inform_1'=1) & (brokenFlag_1'=1);
  [] !active_1 & brokenFlag_1==0 @ dfc_1 -> (inform_1'=1) & (brokenFlag_1'=1);
  [r_1??] brokenFlag_1==1 -> (brokenFlag_1'=2) & (rc_1'=erlang(1,3));
  [] active_1 & brokenFlag_1==2 @ rc_1 -> (inform_1'=2) & (brokenFlag_1'=0) & (fc_1'=erlang(2,2));
  [] !active_1 & brokenFlag_1==2 @ rc_1 -> (inform_1'=2) & (brokenFlag_1'=0) & (dfc_1'=erlang(1,2));
  

  [f_1!!] inform_1==1 -> (inform_1'=0);
  [u_1!!] inform_1==2 -> (inform_1'=0);
endmodule

//Type: MUX with priority policy; Assigned name: MUX_for_S_BE_2; Assigned unique id: 6
module MUX_6
  queue_6[2]: [0..3] init 0; // State of each spare gates: 0=idle, 1=requesting, 2=reject, 3=using
  avail_6: bool init true; //true if the associated SBE is available
  broken_6: bool init false; // false if the associated SBE is not broken
  enable_6: [0..2] init 0; //used to inform the SBE if is dormant or active

  //Communication from SBE to MUX about the state of the SBE
  [f_4??] -> (broken_6'=true);
  [u_4??] -> (broken_6'=false);

  //Communication from MUX to SBE to inform it to be dormant or active
  [a_4!!] enable_6 == 1 -> (enable_6'=0);
  [d_4!!] enable_6 == 2 -> (enable_6'=0);

  //Communication from multiplexers to spare gates. The relationship is many to many. We use the naming convention <action_name>_<id_from>_<id_to>
  [rq_6_2??] queue_6[0] == 0 & (broken_6 | !avail_6) -> (queue_6[0]' = 2);
  [rq_6_2??] queue_6[0] == 0 & !broken_6 & avail_6 -> (queue_6[0]' = 1);
  [asg_6_2!!] queue_6[0]==1 & !broken_6 & avail_6 -> (queue_6[0]' = 3) & (avail_6' = false);
  [rj_6_2!!] queue_6[0] == 2 -> (queue_6[0]' = 1);
  [rel_6_2??] queue_6[0] == 3 -> (queue_6[0]' = 0) & (avail_6' = true) & (enable_6' = 2);  
  [acc_6_2??] -> (enable_6' = 1);
  [rq_6_5??] queue_6[1] == 0 & (broken_6 | !avail_6) -> (queue_6[1]' = 2);
  [rq_6_5??] queue_6[1] == 0 & !broken_6 & avail_6 -> (queue_6[1]' = 1);
  [asg_6_5!!] queue_6[1]==1  & queue_6[0]==0  & !broken_6 & avail_6 -> (queue_6[1]' = 3) & (avail_6' = false);
  [rj_6_5!!] queue_6[1] == 2 -> (queue_6[1]' = 1);
  [rel_6_5??] queue_6[1] == 3 -> (queue_6[1]' = 0) & (avail_6' = true) & (enable_6' = 2);  
  [acc_6_5??] -> (enable_6' = 1);

endmodule

//Type: Basic event; Original name: S_BE_2; Assigned unique id: 4
module BE_4
  fc_4 : clock;
  dfc_4 : clock;
  rc_4 : clock;
  inform_4 : [0..2] init 0;
  active_4 : bool init false;
  brokenFlag_4 : [0..2] init 0;

  [a_4??] !active_4 -> (active_4'=true) & (fc_4'=erlang(4,2));
  [d_4??] active_4 & brokenFlag_4 == 0 -> (active_4'=false) & (dfc_4'=erlang(3,2));
  [d_4??] active_4 & brokenFlag_4 != 0 -> (active_4'=false);
  
  [] active_4 & brokenFlag_4==0 @ fc_4 -> (inform_4'=1) & (brokenFlag_4'=1);
  [] !active_4 & brokenFlag_4==0 @ dfc_4 -> (inform_4'=1) & (brokenFlag_4'=1);
  [r_4??] brokenFlag_4==1 -> (brokenFlag_4'=2) & (rc_4'=erlang(1,3));
  [] active_4 & brokenFlag_4==2 @ rc_4 -> (inform_4'=2) & (brokenFlag_4'=0) & (fc_4'=erlang(4,2));
  [] !active_4 & brokenFlag_4==2 @ rc_4 -> (inform_4'=2) & (brokenFlag_4'=0) & (dfc_4'=erlang(3,2));
  

  [f_4!!] inform_4==1 -> (inform_4'=0);
  [u_4!!] inform_4==2 -> (inform_4'=0);
endmodule

//Type: spare gate; Original name: SPARE1; Assigned unique id: 2
module SPARE_2
  state_2: [0..4] init 0; // on main, request, wait, on spare, broken
  inform_2: [0..2] init 0; // Inform when spare is broken or start to work again
  release_2: [-2..2] init 0; // 0 nothing, positive values to inform about release, negative values to inform about accept
  idx_2: [1..2] init 1;//Current spare used or candidate to be used

  [f_0??] state_2==0 -> (state_2'=1) & (idx_2'=1); // main fails
  [u_0??] state_2==4 -> (state_2'=0) & (inform_2'=2); // main gets repaired and spare was broken
  [u_0??] state_2==3 & idx_2==1 -> (state_2'=0) & (idx_2'=1) & (release_2'=1); // main get repaired and gate was using a SBE
  [u_0??] state_2==3 & idx_2==2 -> (state_2'=0) & (idx_2'=1) & (release_2'=2); // main get repaired and gate was using a SBE

  [f_1??] state_2==3 & idx_2==1 -> (release_2'=1); //Currently used spare fails!
  [f_4??] state_2==3 & idx_2==2 -> (release_2'=2); //Currently used spare fails!

  [rq_3_2!!] state_2==1 & idx_2==1 -> (state_2'=2); // Request spare number 1
  [rq_6_2!!] state_2==1 & idx_2==2 -> (state_2'=2); // Request spare number 2

  [asg_3_2??] state_2==0 | state_2==1 | state_2==3 -> (release_2'=1); // we are assigned spare 1 but we dont want it
  [asg_3_2??] state_2==2 & idx_2==1 -> (release_2'=-1) & (state_2'=3); // we are assigned spare 1
  [asg_3_2??] state_2==4 -> (release_2'=-1) & (state_2'=3) & (idx_2'=1) & (inform_2'=2); // we 'get fixed' thanks to a spare assignment
  [asg_6_2??] state_2==0 | state_2==1 | state_2==3 -> (release_2'=2); // we are assigned spare 2 but we dont want it
  [asg_6_2??] state_2==2 & idx_2==2 -> (release_2'=-2) & (state_2'=3); // we are assigned spare 2
  [asg_6_2??] state_2==4 -> (release_2'=-2) & (state_2'=3) & (idx_2'=2) & (inform_2'=2); // we 'get fixed' thanks to a spare assignment
  
  [rj_3_2??] state_2==2 & idx_2==1 -> (idx_2'=2) & (state_2'=1); // they reject giving us spare 1
  [rj_6_2??] state_2==2 & idx_2==2 -> (state_2'=4) & (idx_2'=1) & (inform_2'=1);
  
  [rel_3_2!!] release_2==1 & (state_2 != 3 | idx_2 != 1) -> (release_2'= 0); // release spare 1 when not wanted
  [rel_3_2!!] release_2==1 & state_2 == 3 & idx_2 == 1 -> (release_2'= 0)  & (state_2'=1) & (idx_2'=1); // release spare 1 when brakes and Im using it
  [rel_6_2!!] release_2==2 & (state_2 != 3 | idx_2 != 2) -> (release_2'= 0); // release spare 2 when not wanted
  [rel_6_2!!] release_2==2 & state_2 == 3 & idx_2 == 2 -> (release_2'= 0)  & (state_2'=1) & (idx_2'=1); // release spare 2 when brakes and Im using it

  [acc_3_2!!] release_2 ==-1 -> (release_2'=0); 
  [acc_6_2!!] release_2 ==-2 -> (release_2'=0); 

  [f_2!!] inform_2 == 1 -> (inform_2'=0);
  [u_2!!] inform_2 == 2 -> (inform_2'=0);
endmodule

//Type: Basic event; Original name: P_BE2; Assigned unique id: 7
module BE_7
  fc_7 : clock;
  inform_7 : [0..2] init 0;
  brokenFlag_7 : [0..2] init 0;

  [] brokenFlag_7==2 @ fc_7-> (brokenFlag_7'=0) & (fc_7'=erlang(1,2));
  [] brokenFlag_7==0 @ fc_7 -> (inform_7'=1) & (brokenFlag_7'=1);
  

  [f_7!!] inform_7==1 -> (inform_7'=0);
endmodule

//Type: MUX with priority policy; Assigned name: MUX_for_S_BE_3; Assigned unique id: 9
module MUX_9
  queue_9[1]: [0..3] init 0; // State of each spare gates: 0=idle, 1=requesting, 2=reject, 3=using
  avail_9: bool init true; //true if the associated SBE is available
  broken_9: bool init false; // false if the associated SBE is not broken
  enable_9: [0..2] init 0; //used to inform the SBE if is dormant or active

  //Communication from SBE to MUX about the state of the SBE
  [f_8??] -> (broken_9'=true);
  [u_8??] -> (broken_9'=false);

  //Communication from MUX to SBE to inform it to be dormant or active
  [a_8!!] enable_9 == 1 -> (enable_9'=0);
  [d_8!!] enable_9 == 2 -> (enable_9'=0);

  //Communication from multiplexers to spare gates. The relationship is many to many. We use the naming convention <action_name>_<id_from>_<id_to>
  [rq_9_5??] queue_9[0] == 0 & (broken_9 | !avail_9) -> (queue_9[0]' = 2);
  [rq_9_5??] queue_9[0] == 0 & !broken_9 & avail_9 -> (queue_9[0]' = 1);
  [asg_9_5!!] queue_9[0]==1 & !broken_9 & avail_9 -> (queue_9[0]' = 3) & (avail_9' = false);
  [rj_9_5!!] queue_9[0] == 2 -> (queue_9[0]' = 1);
  [rel_9_5??] queue_9[0] == 3 -> (queue_9[0]' = 0) & (avail_9' = true) & (enable_9' = 2);  
  [acc_9_5??] -> (enable_9' = 1);

endmodule

//Type: Basic event; Original name: S_BE_3; Assigned unique id: 8
module BE_8
  fc_8 : clock;
  dfc_8 : clock;
  rc_8 : clock;
  inform_8 : [0..2] init 0;
  active_8 : bool init false;
  brokenFlag_8 : [0..2] init 0;

  [a_8??] !active_8 -> (active_8'=true) & (fc_8'=erlang(6,2));
  [d_8??] active_8 & brokenFlag_8 == 0 -> (active_8'=false) & (dfc_8'=erlang(5,2));
  [d_8??] active_8 & brokenFlag_8 != 0 -> (active_8'=false);
  
  [] active_8 & brokenFlag_8==0 @ fc_8 -> (inform_8'=1) & (brokenFlag_8'=1);
  [] !active_8 & brokenFlag_8==0 @ dfc_8 -> (inform_8'=1) & (brokenFlag_8'=1);
  [r_8??] brokenFlag_8==1 -> (brokenFlag_8'=2) & (rc_8'=erlang(1,3));
  [] active_8 & brokenFlag_8==2 @ rc_8 -> (inform_8'=2) & (brokenFlag_8'=0) & (fc_8'=erlang(6,2));
  [] !active_8 & brokenFlag_8==2 @ rc_8 -> (inform_8'=2) & (brokenFlag_8'=0) & (dfc_8'=erlang(5,2));
  

  [f_8!!] inform_8==1 -> (inform_8'=0);
  [u_8!!] inform_8==2 -> (inform_8'=0);
endmodule

//Type: spare gate; Original name: SPARE2; Assigned unique id: 5
module SPARE_5
  state_5: [0..4] init 0; // on main, request, wait, on spare, broken
  inform_5: [0..2] init 0; // Inform when spare is broken or start to work again
  release_5: [-2..2] init 0; // 0 nothing, positive values to inform about release, negative values to inform about accept
  idx_5: [1..2] init 1;//Current spare used or candidate to be used

  [f_7??] state_5==0 -> (state_5'=1) & (idx_5'=1); // main fails
  [u_7??] state_5==4 -> (state_5'=0) & (inform_5'=2); // main gets repaired and spare was broken
  [u_7??] state_5==3 & idx_5==1 -> (state_5'=0) & (idx_5'=1) & (release_5'=1); // main get repaired and gate was using a SBE
  [u_7??] state_5==3 & idx_5==2 -> (state_5'=0) & (idx_5'=1) & (release_5'=2); // main get repaired and gate was using a SBE

  [f_4??] state_5==3 & idx_5==1 -> (release_5'=1); //Currently used spare fails!
  [f_8??] state_5==3 & idx_5==2 -> (release_5'=2); //Currently used spare fails!

  [rq_6_5!!] state_5==1 & idx_5==1 -> (state_5'=2); // Request spare number 1
  [rq_9_5!!] state_5==1 & idx_5==2 -> (state_5'=2); // Request spare number 2

  [asg_6_5??] state_5==0 | state_5==1 | state_5==3 -> (release_5'=1); // we are assigned spare 1 but we dont want it
  [asg_6_5??] state_5==2 & idx_5==1 -> (release_5'=-1) & (state_5'=3); // we are assigned spare 1
  [asg_6_5??] state_5==4 -> (release_5'=-1) & (state_5'=3) & (idx_5'=1) & (inform_5'=2); // we 'get fixed' thanks to a spare assignment
  [asg_9_5??] state_5==0 | state_5==1 | state_5==3 -> (release_5'=2); // we are assigned spare 2 but we dont want it
  [asg_9_5??] state_5==2 & idx_5==2 -> (release_5'=-2) & (state_5'=3); // we are assigned spare 2
  [asg_9_5??] state_5==4 -> (release_5'=-2) & (state_5'=3) & (idx_5'=2) & (inform_5'=2); // we 'get fixed' thanks to a spare assignment
  
  [rj_6_5??] state_5==2 & idx_5==1 -> (idx_5'=2) & (state_5'=1); // they reject giving us spare 1
  [rj_9_5??] state_5==2 & idx_5==2 -> (state_5'=4) & (idx_5'=1) & (inform_5'=1);
  
  [rel_6_5!!] release_5==1 & (state_5 != 3 | idx_5 != 1) -> (release_5'= 0); // release spare 1 when not wanted
  [rel_6_5!!] release_5==1 & state_5 == 3 & idx_5 == 1 -> (release_5'= 0)  & (state_5'=1) & (idx_5'=1); // release spare 1 when brakes and Im using it
  [rel_9_5!!] release_5==2 & (state_5 != 3 | idx_5 != 2) -> (release_5'= 0); // release spare 2 when not wanted
  [rel_9_5!!] release_5==2 & state_5 == 3 & idx_5 == 2 -> (release_5'= 0)  & (state_5'=1) & (idx_5'=1); // release spare 2 when brakes and Im using it

  [acc_6_5!!] release_5 ==-1 -> (release_5'=0); 
  [acc_9_5!!] release_5 ==-2 -> (release_5'=0); 

  [f_5!!] inform_5 == 1 -> (inform_5'=0);
  [u_5!!] inform_5 == 2 -> (inform_5'=0);
endmodule

//Type: OR gate; Original name: OR1; Assigned unique id: 10
module OR_10
  informf_10: bool init false;
  informu_10: bool init false;
  count_10: [0..2] init 0;

  [f_2??] count_10==0 -> (count_10'=1) & (informf_10'=true);
  [f_2??] count_10==1 -> (count_10'=2);
  [f_5??] count_10==0 -> (count_10'=1) & (informf_10'=true);
  [f_5??] count_10==1 -> (count_10'=2);

  [u_2??] count_10==1 -> (count_10'=0) & (informu_10'=true);
  [u_2??] count_10==2 -> (count_10'=1);
  [u_5??] count_10==1 -> (count_10'=0) & (informu_10'=true);
  [u_5??] count_10==2 -> (count_10'=1);

  [f_10!!] informf_10 & count_10>0 -> (informf_10'=false);
  [u_10!!] informu_10 & count_10==0 -> (informu_10'=false);
endmodule

