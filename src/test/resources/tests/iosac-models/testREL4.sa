//Type: Basic event; Original name: BE1; Assigned unique id: 0
module BE_0
  fc_0 : clock;
  inform_0 : [0..2] init 0;
  brokenFlag_0 : [0..2] init 0;

  [] brokenFlag_0==2 @ fc_0-> (brokenFlag_0'=0) & (fc_0'=exponential(0.00020));
  [] brokenFlag_0==0 @ fc_0 -> (inform_0'=1) & (brokenFlag_0'=1);
  

  [f_0!!] inform_0==1 -> (inform_0'=0);
endmodule

//Type: Basic event; Original name: BE2; Assigned unique id: 1
module BE_1
  fc_1 : clock;
  inform_1 : [0..2] init 0;
  brokenFlag_1 : [0..2] init 0;

  [] brokenFlag_1==2 @ fc_1-> (brokenFlag_1'=0) & (fc_1'=exponential(0.00010));
  [] brokenFlag_1==0 @ fc_1 -> (inform_1'=1) & (brokenFlag_1'=1);
  

  [f_1!!] inform_1==1 -> (inform_1'=0);
endmodule

//Type: Basic event; Original name: BE3; Assigned unique id: 2
module BE_2
  fc_2 : clock;
  inform_2 : [0..2] init 0;
  brokenFlag_2 : [0..2] init 0;

  [] brokenFlag_2==2 @ fc_2-> (brokenFlag_2'=0) & (fc_2'=exponential(0.00010));
  [] brokenFlag_2==0 @ fc_2 -> (inform_2'=1) & (brokenFlag_2'=1);
  

  [f_2!!] inform_2==1 -> (inform_2'=0);
endmodule

//Type: Voting 2/3 gate; Original name: GATE1; Assigned unique id: 3
module VOTING_3
  informf_3: bool init false;
  informu_3: bool init false;
  count_3: [0..3] init 0;

  [f_0??] count_3==0 -> (count_3'=1);
  [f_0??] count_3==1 -> (count_3'=2) & (informf_3'=true);
  [f_0??] count_3==2 -> (count_3'=3) & (informf_3'=true);
  [f_1??] count_3==0 -> (count_3'=1);
  [f_1??] count_3==1 -> (count_3'=2) & (informf_3'=true);
  [f_1??] count_3==2 -> (count_3'=3) & (informf_3'=true);
  [f_2??] count_3==0 -> (count_3'=1);
  [f_2??] count_3==1 -> (count_3'=2) & (informf_3'=true);
  [f_2??] count_3==2 -> (count_3'=3) & (informf_3'=true);

  [u_0??] count_3==1 -> (count_3'=0);
  [u_0??] count_3==2 -> (count_3'=1) & (informu_3'=true);
  [u_0??] count_3==3 -> (count_3'=2) & (informu_3'=true);
  [u_1??] count_3==1 -> (count_3'=0);
  [u_1??] count_3==2 -> (count_3'=1) & (informu_3'=true);
  [u_1??] count_3==3 -> (count_3'=2) & (informu_3'=true);
  [u_2??] count_3==1 -> (count_3'=0);
  [u_2??] count_3==2 -> (count_3'=1) & (informu_3'=true);
  [u_2??] count_3==3 -> (count_3'=2) & (informu_3'=true);

  [f_3!!] informf_3 & count_3>=2 -> (informf_3'=false);
  [u_3!!] informu_3 & count_3<2 -> (informu_3'=false);
endmodule


const float t_limit = 5.5; 

module ReliabilityTimer
  ReliabilityTimeOut: [0..2] init 0;
  clkTO: clock;
  [TOinit!!] ReliabilityTimeOut == 0 -> (ReliabilityTimeOut'=1) & (clkTO'=dirac(t_limit));
  [] ReliabilityTimeOut==1 @ clkTO -> (ReliabilityTimeOut'=2);
endmodule

properties
  P( ReliabilityTimeOut<2  U count_3==2  ) //Reliability property
endproperties

