//Type: Basic event; Original name: BE1; Assigned unique id: 0
module BE_0
  fc_0 : clock;
  inform_0 : [0..2] init 0;
  brokenFlag_0 : [0..2] init 0;

  [] brokenFlag_0==2 @ fc_0-> (brokenFlag_0'=0) & (fc_0'=exponential(0.00010));
  [] brokenFlag_0==0 @ fc_0 -> (inform_0'=1) & (brokenFlag_0'=1);
  

  [f_0!!] inform_0==1 -> (inform_0'=0);
endmodule

//Type: Basic event; Original name: BE2; Assigned unique id: 1
module BE_1
  fc_1 : clock;
  inform_1 : [0..2] init 0;
  brokenFlag_1 : [0..2] init 0;

  [] brokenFlag_1==2 @ fc_1-> (brokenFlag_1'=0) & (fc_1'=exponential(0.00020));
  [] brokenFlag_1==0 @ fc_1 -> (inform_1'=1) & (brokenFlag_1'=1);
  

  [f_1!!] inform_1==1 -> (inform_1'=0);
endmodule

//In the conversion process, each n-inputs PAND is converted in n-1 2-inputs PAND
//Type: PAND gate; Original name: PAND1_level_1; Assigned unique id: 2
module PAND_2
  f0_2: bool init false;
  f1_2: bool init false;
  st_2: [0..4] init 0; // up, inform fail, failed, inform up, unbreakable

  //This action keep listening for each clock expired in whole the model
  [_?] st_2==0 & f1_2 & !f0_2 -> (st_2'=4);

  [f_0??] st_2==0 & !f0_2 & !f1_2-> (f0_2'=true);
  [f_0??] st_2==0 & !f0_2 & f1_2 -> (st_2'=1) & (f0_2'=true);
  [f_0??] st_2!=0 & !f0_2 -> (f0_2'=true);

  [f_1??] st_2==0 & !f0_2 & !f1_2 -> (f1_2'=true);
  [f_1??] st_2==0 & f0_2 & !f1_2 -> (st_2'=1) & (f1_2'=true);
  [f_1??] st_2==3 & !f1_2 -> (st_2'=2) & (f1_2'=true);
  [f_1??] (st_2==1|st_2==2|st_2==4) & !f1_2 -> (f1_2'=true);

  [u_0??] st_2!=1 & f0_2 -> (f0_2'=false);
  [u_0??] st_2==1 & f0_2 -> (st_2'=0) & (f0_2'=false);

  [u_1??] (st_2==0|st_2==3) & f1_2 -> (f1_2'=false);
  [u_1??] (st_2==1|st_2==4) & f1_2 -> (st_2'=0) & (f1_2'=false);
  [u_1??] st_2==2 & f1_2 -> (st_2'=3) & (f1_2'=false);

  [f_2!!] st_2==1 -> (st_2'=2);
  [u_2!!] st_2==3 -> (st_2'=0);
endmodule

//Type: Basic event; Original name: BE3; Assigned unique id: 3
module BE_3
  fc_3 : clock;
  inform_3 : [0..2] init 0;
  brokenFlag_3 : [0..2] init 0;

  [] brokenFlag_3==2 @ fc_3-> (brokenFlag_3'=0) & (fc_3'=exponential(0.00030));
  [] brokenFlag_3==0 @ fc_3 -> (inform_3'=1) & (brokenFlag_3'=1);
  

  [f_3!!] inform_3==1 -> (inform_3'=0);
endmodule

//In the conversion process, each n-inputs PAND is converted in n-1 2-inputs PAND
//Type: PAND gate; Original name: PAND1_level_2; Assigned unique id: 4
module PAND_4
  f0_4: bool init false;
  f1_4: bool init false;
  st_4: [0..4] init 0; // up, inform fail, failed, inform up, unbreakable

  //This action keep listening for each clock expired in whole the model
  [_?] st_4==0 & f1_4 & !f0_4 -> (st_4'=4);

  [f_2??] st_4==0 & !f0_4 & !f1_4-> (f0_4'=true);
  [f_2??] st_4==0 & !f0_4 & f1_4 -> (st_4'=1) & (f0_4'=true);
  [f_2??] st_4!=0 & !f0_4 -> (f0_4'=true);

  [f_3??] st_4==0 & !f0_4 & !f1_4 -> (f1_4'=true);
  [f_3??] st_4==0 & f0_4 & !f1_4 -> (st_4'=1) & (f1_4'=true);
  [f_3??] st_4==3 & !f1_4 -> (st_4'=2) & (f1_4'=true);
  [f_3??] (st_4==1|st_4==2|st_4==4) & !f1_4 -> (f1_4'=true);

  [u_2??] st_4!=1 & f0_4 -> (f0_4'=false);
  [u_2??] st_4==1 & f0_4 -> (st_4'=0) & (f0_4'=false);

  [u_3??] (st_4==0|st_4==3) & f1_4 -> (f1_4'=false);
  [u_3??] (st_4==1|st_4==4) & f1_4 -> (st_4'=0) & (f1_4'=false);
  [u_3??] st_4==2 & f1_4 -> (st_4'=3) & (f1_4'=false);

  [f_4!!] st_4==1 -> (st_4'=2);
  [u_4!!] st_4==3 -> (st_4'=0);
endmodule

//Type: Basic event; Original name: BE4; Assigned unique id: 5
module BE_5
  fc_5 : clock;
  inform_5 : [0..2] init 0;
  brokenFlag_5 : [0..2] init 0;

  [] brokenFlag_5==2 @ fc_5-> (brokenFlag_5'=0) & (fc_5'=exponential(0.00040));
  [] brokenFlag_5==0 @ fc_5 -> (inform_5'=1) & (brokenFlag_5'=1);
  

  [f_5!!] inform_5==1 -> (inform_5'=0);
endmodule

//In the conversion process, each n-inputs PAND is converted in n-1 2-inputs PAND
//Type: PAND gate; Original name: PAND1_level_3; Assigned unique id: 6
module PAND_6
  f0_6: bool init false;
  f1_6: bool init false;
  st_6: [0..4] init 0; // up, inform fail, failed, inform up, unbreakable

  //This action keep listening for each clock expired in whole the model
  [_?] st_6==0 & f1_6 & !f0_6 -> (st_6'=4);

  [f_4??] st_6==0 & !f0_6 & !f1_6-> (f0_6'=true);
  [f_4??] st_6==0 & !f0_6 & f1_6 -> (st_6'=1) & (f0_6'=true);
  [f_4??] st_6!=0 & !f0_6 -> (f0_6'=true);

  [f_5??] st_6==0 & !f0_6 & !f1_6 -> (f1_6'=true);
  [f_5??] st_6==0 & f0_6 & !f1_6 -> (st_6'=1) & (f1_6'=true);
  [f_5??] st_6==3 & !f1_6 -> (st_6'=2) & (f1_6'=true);
  [f_5??] (st_6==1|st_6==2|st_6==4) & !f1_6 -> (f1_6'=true);

  [u_4??] st_6!=1 & f0_6 -> (f0_6'=false);
  [u_4??] st_6==1 & f0_6 -> (st_6'=0) & (f0_6'=false);

  [u_5??] (st_6==0|st_6==3) & f1_6 -> (f1_6'=false);
  [u_5??] (st_6==1|st_6==4) & f1_6 -> (st_6'=0) & (f1_6'=false);
  [u_5??] st_6==2 & f1_6 -> (st_6'=3) & (f1_6'=false);

  [f_6!!] st_6==1 -> (st_6'=2);
  [u_6!!] st_6==3 -> (st_6'=0);
endmodule

